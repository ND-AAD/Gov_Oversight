name: Deploy to GitHub Pages

on:
  # Triggered by successful scraping workflow
  workflow_dispatch:
  
  # Also deploy on pushes to main that affect frontend
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'data/**'
      - '.github/workflows/deploy.yml'

  # Manual deployment trigger
  workflow_call:

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '18'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Prepare data for static deployment
      run: |
        echo "üìä Preparing RFP data for static deployment..."
        
        # Ensure data directory exists in frontend public
        mkdir -p frontend/public/data
        
        # Copy current RFP data to frontend public directory for static access
        if [ -f "data/rfps.json" ]; then
          cp data/rfps.json frontend/public/data/rfps.json
          echo "‚úÖ Copied RFP data ($(wc -l < data/rfps.json) lines)"
        else
          echo "‚ö†Ô∏è No RFP data found, creating empty dataset"
          echo "[]" > frontend/public/data/rfps.json
        fi
        
        # Copy site configurations
        if [ -f "data/sites.json" ]; then
          cp data/sites.json frontend/public/data/sites.json
          echo "‚úÖ Copied site configurations"
        else
          echo "‚ö†Ô∏è No site configurations found, using sample data"
          cp data/sample_sites.json frontend/public/data/sites.json
        fi
        
        # Copy or generate statistics
        if [ -f "data/stats.json" ]; then
          cp data/stats.json frontend/public/data/stats.json
        else
          echo "üìä Generating statistics from RFP data..."
          node -e "
            const fs = require('fs');
            try {
              const rfps = JSON.parse(fs.readFileSync('frontend/public/data/rfps.json', 'utf8'));
              const stats = {
                timestamp: new Date().toISOString(),
                total_rfps: rfps.length,
                active_rfps: rfps.filter(r => r.extracted_fields?.status?.toLowerCase() === 'active').length,
                olympic_related: rfps.filter(r => r.categories?.includes('olympic')).length,
                surveillance_flagged: rfps.filter(r => 
                  r.categories?.some(cat => ['surveillance', 'security', 'monitoring'].includes(cat))
                ).length,
                last_updated: new Date().toISOString()
              };
              fs.writeFileSync('frontend/public/data/stats.json', JSON.stringify(stats, null, 2));
              console.log('‚úÖ Generated statistics:', JSON.stringify(stats, null, 2));
            } catch (e) {
              console.error('Error generating stats:', e.message);
              const fallbackStats = {
                timestamp: new Date().toISOString(),
                total_rfps: 0,
                active_rfps: 0,
                olympic_related: 0,
                surveillance_flagged: 0,
                last_updated: new Date().toISOString()
              };
              fs.writeFileSync('frontend/public/data/stats.json', JSON.stringify(fallbackStats, null, 2));
            }
          "
        fi
        
        # Create metadata file for deployment info
        cat > frontend/public/data/metadata.json << EOF
{
  "deployment": {
    "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "commit_sha": "${{ github.sha }}",
    "workflow_run": "${{ github.run_number }}",
    "triggered_by": "${{ github.event_name }}",
    "branch": "${{ github.ref_name }}"
  },
  "data_sources": {
    "rfps_file": "data/rfps.json",
    "sites_file": "data/sites.json", 
    "stats_file": "data/stats.json"
  },
  "build_info": {
    "node_version": "${{ env.NODE_VERSION }}",
    "build_time": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  }
}
EOF
        
        echo "üì¶ Data preparation complete"

    - name: Configure build for GitHub Pages
      run: |
        cd frontend
        
        echo "üåê Configuring for GitHub Pages deployment"
        echo "Repository: ${{ github.repository }}"
        echo "Base URL: /Gov_Oversight/"
        
        # The vite.config.ts is already configured for GitHub Pages deployment

    - name: Build frontend application
      run: |
        cd frontend
        echo "üèóÔ∏è Building frontend application..."
        
        # Set production environment
        export NODE_ENV=production
        
        # Build the application
        npm run build
        
        # Verify build output
        if [ -d "dist" ]; then
          echo "‚úÖ Build successful"
          echo "Build size: $(du -sh dist | cut -f1)"
          echo "Files created: $(find dist -type f | wc -l)"
        else
          echo "‚ùå Build failed - no dist directory created"
          exit 1
        fi

    - name: Optimize build for deployment
      run: |
        cd frontend/dist
        
        echo "‚ö° Optimizing build for deployment..."
        
        # Create .nojekyll file to bypass Jekyll processing
        touch .nojekyll
        
        # Create 404.html for SPA routing support
        cp index.html 404.html
        
        # Add robots.txt for ethical scraping visibility
        cat > robots.txt << 'EOF'
# LA 2028 RFP Monitor - Public Oversight Tool
# This site monitors government procurement for transparency

User-agent: *
Allow: /

# Sitemap (if generated)
Sitemap: https://nd-aad.github.io/Gov_Oversight/sitemap.xml

# Contact for questions about this monitoring tool
# See GitHub repository for more information
EOF
        
        # Create a simple sitemap
        cat > sitemap.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://nd-aad.github.io/Gov_Oversight/</loc>
    <lastmod>EOF
        date -u +"%Y-%m-%dT%H:%M:%SZ" >> sitemap.xml
        cat >> sitemap.xml << 'EOF'</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
</urlset>
EOF
        
        echo "üìÅ Build optimization complete"

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: './frontend/dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ‚úÖ Successfully deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The LA 2028 RFP Monitor is now live and accessible to the public." >> $GITHUB_STEP_SUMMARY

  # Optional: Create deployment notification
  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "üéâ LA 2028 RFP Monitor successfully deployed!"
          echo "üåê Public URL: ${{ needs.deploy.outputs.page_url || 'https://nd-aad.github.io/Gov_Oversight/' }}"
          echo "üìä Government RFP transparency tool is now live"
        else
          echo "‚ùå Deployment failed"
          echo "üîç Check workflow logs for details"
        fi